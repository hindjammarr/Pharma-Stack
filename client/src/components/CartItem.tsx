import { Button } from "@/components/ui/button";\nimport { Card, CardContent } from "@/components/ui/card";\nimport { Input } from "@/components/ui/input";\nimport { Minus, Plus, Trash2 } from "lucide-react";\nimport { useState } from "react";\n\ninterface CartItemProps {\n  id: string;\n  name: string;\n  price: number;\n  quantity: number;\n  image?: string;\n  maxStock?: number;\n  onQuantityChange: (id: string, quantity: number) => void;\n  onRemove: (id: string) => void;\n}\n\nexport function CartItem({\n  id,\n  name,\n  price,\n  quantity,\n  image,\n  maxStock = 99,\n  onQuantityChange,\n  onRemove\n}: CartItemProps) {\n  const [isUpdating, setIsUpdating] = useState(false);\n  \n  const handleQuantityChange = async (newQuantity: number) => {\n    if (newQuantity < 1 || newQuantity > maxStock) return;\n    \n    setIsUpdating(true);\n    console.log(`Updating quantity for ${id} to ${newQuantity}`);\n    onQuantityChange(id, newQuantity);\n    setTimeout(() => setIsUpdating(false), 300);\n  };\n  \n  const handleRemove = () => {\n    console.log(`Removing item ${id} from cart`);\n    onRemove(id);\n  };\n  \n  const total = price * quantity;\n  \n  return (\n    <Card>\n      <CardContent className="p-4\">\n        <div className=\"flex items-center gap-4\">\n          {/* Product image */}\n          <div className=\"w-16 h-16 rounded-lg bg-muted flex items-center justify-center flex-shrink-0\">\n            {image ? (\n              <img \n                src={image} \n                alt={name}\n                className=\"w-full h-full object-cover rounded-lg\"\n              />\n            ) : (\n              <span className=\"text-2xl\">ðŸ’Š</span>\n            )}\n          </div>\n          \n          {/* Product info */}\n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"font-medium truncate\" data-testid={`text-cart-item-name-${id}`}>\n              {name}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {price.toFixed(2)} â‚¬ / unitÃ©\n            </p>\n          </div>\n          \n          {/* Quantity controls */}\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              className=\"h-8 w-8\"\n              onClick={() => handleQuantityChange(quantity - 1)}\n              disabled={quantity <= 1 || isUpdating}\n              data-testid={`button-decrease-${id}`}\n            >\n              <Minus className=\"h-4 w-4\" />\n            </Button>\n            \n            <Input\n              type=\"number\"\n              value={quantity}\n              onChange={(e) => {\n                const newQuantity = parseInt(e.target.value) || 1;\n                handleQuantityChange(newQuantity);\n              }}\n              className=\"w-16 text-center h-8\"\n              min={1}\n              max={maxStock}\n              disabled={isUpdating}\n              data-testid={`input-quantity-${id}`}\n            />\n            \n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              className=\"h-8 w-8\"\n              onClick={() => handleQuantityChange(quantity + 1)}\n              disabled={quantity >= maxStock || isUpdating}\n              data-testid={`button-increase-${id}`}\n            >\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          {/* Price and remove */}\n          <div className=\"flex items-center gap-3\">\n            <span className=\"font-semibold text-lg\" data-testid={`text-total-${id}`}>\n              {total.toFixed(2)} â‚¬\n            </span>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"h-8 w-8 text-destructive hover:text-destructive\"\n              onClick={handleRemove}\n              data-testid={`button-remove-${id}`}\n            >\n              <Trash2 className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}