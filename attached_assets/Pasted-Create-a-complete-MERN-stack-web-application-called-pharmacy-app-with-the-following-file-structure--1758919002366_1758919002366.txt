Create a complete MERN stack web application called pharmacy-app with the following file structure, including all necessary code, configurations, and dependencies.

📂 File structure
pharmacy-app/
│
├── backend/
│   ├── server.js
│   ├── config/db.js
│   ├── models/
│   │   ├── User.js
│   │   ├── Product.js
│   │   ├── Category.js
│   │   ├── Order.js
│   │   └── PharmacyInfo.js
│   ├── routes/
│   │   ├── authRoutes.js
│   │   ├── productRoutes.js
│   │   ├── categoryRoutes.js
│   │   ├── orderRoutes.js
│   │   ├── userRoutes.js
│   │   └── pharmacyRoutes.js
│   ├── controllers/
│   ├── middlewares/
│   │   ├── authMiddleware.js
│   │   └── roleMiddleware.js
│   └── utils/
│
├── frontend/
│   ├── src/
│   │   ├── pages/
│   │   │   ├── Accueil.jsx
│   │   │   ├── Produits.jsx
│   │   │   ├── Services.jsx
│   │   │   ├── Contact.jsx
│   │   │   ├── Login.jsx
│   │   │   ├── Signup.jsx
│   │   │   ├── Account.jsx
│   │   │   ├── Orders.jsx
│   │   │   ├── Cart.jsx
│   │   │   ├── Dashboard.jsx
│   │   │   ├── ManageProducts.jsx
│   │   │   ├── ManageCategories.jsx
│   │   │   ├── ManageUsers.jsx
│   │   │   ├── ManageOrders.jsx
│   │   │   └── Settings.jsx
│   │   ├── components/
│   │   ├── context/
│   │   ├── services/
│   │   └── App.jsx
│
└── README.md

🗄️ Backend (Node.js + Express + MongoDB)

Connect to MongoDB in config/db.js.

Models:

User.js → { name, email, password (hashed), role (admin|client), createdAt }

Product.js → { name, description, category, price, stock, image }

Category.js → { name, slug }

Order.js → { userId, products[], total, status, createdAt }

PharmacyInfo.js → { horaires, pharmacieDeGarde, adresse, telephone }

Routes:

authRoutes.js → signup, login, JWT auth

productRoutes.js → CRUD for products

categoryRoutes.js → CRUD for categories

orderRoutes.js → create/view orders

userRoutes.js → manage users (admin only)

pharmacyRoutes.js → get/update pharmacy info

Middleware:

authMiddleware.js → verify JWT

roleMiddleware.js → check if user is admin or client

💻 Frontend (React + Tailwind/MUI)

Pages for public users:

Accueil.jsx (Home), Produits.jsx (Products), Services.jsx, Contact.jsx, Login.jsx, Signup.jsx

Client pages:

Account.jsx, Orders.jsx, Cart.jsx

Admin pages:

Dashboard.jsx, ManageProducts.jsx, ManageCategories.jsx, ManageUsers.jsx, ManageOrders.jsx, Settings.jsx

Use React Router for navigation.

Use Axios to connect with backend API.

Add authentication with JWT (stored in localStorage or HttpOnly cookie).

🔐 Features

Secure authentication (login/signup) for both clients and admins.

Clients: can browse products, manage cart, place orders, and see order history.

Admins: full dashboard to manage products, categories, users, orders, and pharmacy info.

Password hashing with bcrypt.

JWT for access control.

🚀 Installation Commands